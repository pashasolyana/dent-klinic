import { z } from 'zod'
import { sendMail } from '~/server/utils/mailer'
import { assertRateLimit } from '~/server/utils/rateLimit'

const BodySchema = z.object({
  name: z.string().min(2).max(200),
  phone: z.string().min(5).max(30),
  message: z.string().min(1).max(5000),
  consent: z.boolean().refine(v => v === true, '–ù—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω'),

  // –∞–Ω—Ç–∏‚Äë—Å–ø–∞–º –ø–æ–ª—è
  hp_company: z.string().optional(),   // honeypot ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º
  t: z.number().int()                  // unix ms, –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª–∞—Å—å
})

export default defineEventHandler(async (event) => {
  const bodyRaw = await readBody(event).catch(() => ({}))
  const data = BodySchema.safeParse(bodyRaw)
  if (!data.success) {
    throw createError({ statusCode: 400, statusMessage: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', data: data.error.flatten() })
  }
  const b = data.data

  // 1) Honeypot ‚Äî –±–æ—Ç—ã —á–∞—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è—é—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
  if (b.hp_company && b.hp_company.trim() !== '') {
    throw createError({ statusCode: 400, statusMessage: 'Spam detected (hp)' })
  }

  // 2) –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (>= 3 —Å–µ–∫) –∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã (<= 20 –º–∏–Ω)
  const now = Date.now()
  if (now - b.t < 3000) {
    throw createError({ statusCode: 400, statusMessage: '–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' })
  }
  if (now - b.t > 20 * 60 * 1000) {
    throw createError({ statusCode: 400, statusMessage: '–§–æ—Ä–º–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É' })
  }

  // 3) Rate limit: 1 –∑–∞—è–≤–∫–∞ –≤ 5 –º–∏–Ω—É—Ç —Å –æ–¥–Ω–æ–≥–æ IP
  const ip = getRequestIP(event) || getRequestHeader(event, 'x-forwarded-for') || 'unknown'
  await assertRateLimit(`contact:${ip}`, 5 * 60 * 1000)

  // 4) –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
  const html = `
    <div style="font-family:Arial,Helvetica,sans-serif;font-size:14px;line-height:1.6">
      <h2>–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
      <p><b>–ò–º—è:</b> ${escapeHtml(b.name)}</p>
      <p><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(b.phone)}</p>
      <p><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b><br/>${escapeHtml(b.message).replace(/\n/g,'<br/>')}</p>
      <hr/>
      <p style="color:#888">IP: ${escapeHtml(String(ip))}</p>
      <p style="color:#888">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toISOString()}</p>
    </div>
  `
  await sendMail({
    to: process.env.MAIL_USER!, // —Å–≤–æ–π —è—â–∏–∫
    subject: `ü¶∑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${b.name} (${b.phone})`,
    html,
    text: html.replace(/<[^>]+>/g,'').replace(/&nbsp;/g,' ')
  })

  return { ok: true }
})

function escapeHtml(str: string) {
  return String(str)
    .replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;')
    .replaceAll('"', '&quot;')
    .replaceAll("'", '&#039;')
}
